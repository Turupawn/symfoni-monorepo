/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction
} from "ethers";
import {
  Contract,
  ContractTransaction,
  Overrides,
  CallOverrides
} from "@ethersproject/contracts";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";

interface SimpleStorageInterface extends ethers.utils.Interface {
  functions: {
    "getDocument(bytes32)": FunctionFragment;
    "getDocumentList()": FunctionFragment;
    "setDocument(bytes32,string,bytes32)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getDocument",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getDocumentList",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setDocument",
    values: [BytesLike, string, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "getDocument",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDocumentList",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setDocument",
    data: BytesLike
  ): Result;

  events: {
    "Document(bytes32,string,bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Document"): EventFragment;
}

export class SimpleStorage extends Contract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  on(event: EventFilter | string, listener: Listener): this;
  once(event: EventFilter | string, listener: Listener): this;
  addListener(eventName: EventFilter | string, listener: Listener): this;
  removeAllListeners(eventName: EventFilter | string): this;
  removeListener(eventName: any, listener: Listener): this;

  interface: SimpleStorageInterface;

  functions: {
    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      docURI: string;
      docHash: string;
      0: string;
      1: string;
    }>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      docURI: string;
      docHash: string;
      0: string;
      1: string;
    }>;

    getDocumentList(
      overrides?: CallOverrides
    ): Promise<{
      documentList: string[];
      0: string[];
    }>;

    "getDocumentList()"(
      overrides?: CallOverrides
    ): Promise<{
      documentList: string[];
      0: string[];
    }>;

    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<ContractTransaction>;
  };

  getDocument(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    docURI: string;
    docHash: string;
    0: string;
    1: string;
  }>;

  "getDocument(bytes32)"(
    name: BytesLike,
    overrides?: CallOverrides
  ): Promise<{
    docURI: string;
    docHash: string;
    0: string;
    1: string;
  }>;

  getDocumentList(overrides?: CallOverrides): Promise<string[]>;

  "getDocumentList()"(overrides?: CallOverrides): Promise<string[]>;

  setDocument(
    name: BytesLike,
    uri: string,
    documentHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  "setDocument(bytes32,string,bytes32)"(
    name: BytesLike,
    uri: string,
    documentHash: BytesLike,
    overrides?: Overrides
  ): Promise<ContractTransaction>;

  callStatic: {
    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      docURI: string;
      docHash: string;
      0: string;
      1: string;
    }>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<{
      docURI: string;
      docHash: string;
      0: string;
      1: string;
    }>;

    getDocumentList(overrides?: CallOverrides): Promise<string[]>;

    "getDocumentList()"(overrides?: CallOverrides): Promise<string[]>;

    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    Document(name: null, uri: null, docHash: null): EventFilter;
  };

  estimateGas: {
    getDocument(name: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getDocumentList(overrides?: CallOverrides): Promise<BigNumber>;

    "getDocumentList()"(overrides?: CallOverrides): Promise<BigNumber>;

    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getDocument(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getDocument(bytes32)"(
      name: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getDocumentList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "getDocumentList()"(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setDocument(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;

    "setDocument(bytes32,string,bytes32)"(
      name: BytesLike,
      uri: string,
      documentHash: BytesLike,
      overrides?: Overrides
    ): Promise<PopulatedTransaction>;
  };
}
