/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { providers, Signer, ethers } from "ethers";
import React, { useEffect, useState } from "react";
import Web3Modal, { IProviderOptions } from "web3modal";
import { Erc20Burnable } from "./typechain/Erc20Burnable";
import { Erc20BurnableFactory } from "./typechain/Erc20BurnableFactory";
import { Erc20Mintable } from "./typechain/Erc20Mintable";
import { Erc20MintableFactory } from "./typechain/Erc20MintableFactory";
import { Erc20MintableBurnable } from "./typechain/Erc20MintableBurnable";
import { Erc20MintableBurnableFactory } from "./typechain/Erc20MintableBurnableFactory";
import MyContractDeployment from "./deployments/localhost/MyContract.json";
import { MyContract } from "./typechain/MyContract";
import { MyContractFactory } from "./typechain/MyContractFactory";
import SimpleStorageDeployment from "./deployments/localhost/SimpleStorage.json";
import { SimpleStorage } from "./typechain/SimpleStorage";
import { SimpleStorageFactory } from "./typechain/SimpleStorageFactory";
import { Erc20 } from "./typechain/Erc20";
import { Erc20Factory } from "./typechain/Erc20Factory";
import { SimpleStorage2 } from "./typechain/SimpleStorage2";
import { SimpleStorage2Factory } from "./typechain/SimpleStorage2Factory";

export const emptyContract = {
    instance: undefined,
    factory: undefined
};
export const defaultProvider: providers.Provider = ethers.providers.getDefaultProvider();
export const ProviderContext = React.createContext<[providers.Provider, React.Dispatch<React.SetStateAction<providers.Provider>>]>([defaultProvider, () => { }]);
const defaultCurrentAddress: string = "";
export const CurrentAddressContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }]);
const defaultSigner: Signer | undefined = undefined;
export const SignerContext = React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }]);
export const ERC20BurnableContext = React.createContext<SymfoniErc20Burnable>(emptyContract);
export const ERC20MintableContext = React.createContext<SymfoniErc20Mintable>(emptyContract);
export const ERC20MintableBurnableContext = React.createContext<SymfoniErc20MintableBurnable>(emptyContract);
export const MyContractContext = React.createContext<SymfoniMyContract>(emptyContract);
export const SimpleStorageContext = React.createContext<SymfoniSimpleStorage>(emptyContract);
export const ERC20Context = React.createContext<SymfoniErc20>(emptyContract);
export const SimpleStorage2Context = React.createContext<SymfoniSimpleStorage2>(emptyContract);

export interface BuidlerSymfoniReactProps {
}

export interface SymfoniErc20Burnable {
    instance?: Erc20Burnable;
    factory?: Erc20BurnableFactory;
}

export interface SymfoniErc20Mintable {
    instance?: Erc20Mintable;
    factory?: Erc20MintableFactory;
}

export interface SymfoniErc20MintableBurnable {
    instance?: Erc20MintableBurnable;
    factory?: Erc20MintableBurnableFactory;
}

export interface SymfoniMyContract {
    instance?: MyContract;
    factory?: MyContractFactory;
}

export interface SymfoniSimpleStorage {
    instance?: SimpleStorage;
    factory?: SimpleStorageFactory;
}

export interface SymfoniErc20 {
    instance?: Erc20;
    factory?: Erc20Factory;
}

export interface SymfoniSimpleStorage2 {
    instance?: SimpleStorage2;
    factory?: SimpleStorage2Factory;
}

export const BuidlerContext: React.FC<BuidlerSymfoniReactProps> = (props) => {
    const [ready, setReady] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [/* providerName */, setProviderName] = useState<string>();
    const [signer, setSigner] = useState<Signer | undefined>(defaultSigner);
    const [provider, setProvider] = useState<providers.Provider>(defaultProvider);
    const [currentAddress, setCurrentAddress] = useState<string>(defaultCurrentAddress);
    const getProvider = async (): Promise<providers.Provider | undefined> => {
        const provider = await providerPriority.reduce(async (maybeProvider: Promise<providers.Provider | undefined>, providerIdentification) => {
            let foundProvider = await maybeProvider
            if (foundProvider) {
                return Promise.resolve(foundProvider)
            }
            else {
                switch (providerIdentification.toLowerCase()) {
                    case "web3modal":
                        try {
                            const provider = await getWeb3ModalProvider()
                            const web3provider = new ethers.providers.Web3Provider(provider);
                            return Promise.resolve(web3provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    default:
                        return Promise.resolve(undefined)
                }
            }
        }, Promise.resolve(undefined)) // end reduce

        return provider;
    };
    const [ERC20Burnable, setERC20Burnable] = useState<SymfoniErc20Burnable>(emptyContract);
    const [ERC20Mintable, setERC20Mintable] = useState<SymfoniErc20Mintable>(emptyContract);
    const [ERC20MintableBurnable, setERC20MintableBurnable] = useState<SymfoniErc20MintableBurnable>(emptyContract);
    const [MyContract, setMyContract] = useState<SymfoniMyContract>(emptyContract);
    const [SimpleStorage, setSimpleStorage] = useState<SymfoniSimpleStorage>(emptyContract);
    const [ERC20, setERC20] = useState<SymfoniErc20>(emptyContract);
    const [SimpleStorage2, setSimpleStorage2] = useState<SymfoniSimpleStorage2>(emptyContract);
    const providerPriority = ["web3modal", "dev", "HTTP://127.0.0.1:8545"];
    const getWeb3ModalProvider = async (): Promise<any> => {
        const providerOptions: IProviderOptions = {};
        const web3Modal = new Web3Modal({
            // network: "mainnet",
            cacheProvider: true,
            providerOptions, // required
        });
        return await web3Modal.connect();
    };
    useEffect(() => {
        console.debug(messages.pop())
    }, [messages])
    useEffect(() => {
        let subscribed = true
        const doAsync = async () => {
            setMessages(old => [...old, "Initiating Buidler React"])
            const _provider = await getProvider() // getProvider can actually return undefined, see issue https://github.com/microsoft/TypeScript/issues/11094
            if (subscribed && _provider) {
                const _providerName = _provider.constructor.name;
                console.debug("_providerName", _providerName)
                setProvider(_provider)
                setProviderName(_providerName)
                setMessages(old => [...old, "Useing provider: " + _providerName])
                let _signer;
                if (_providerName === "Web3Provider") {
                    const web3provider = _provider as ethers.providers.Web3Provider
                    _signer = await web3provider.getSigner()
                    console.debug("_signer", _signer)
                    if (subscribed && _signer) {
                        setSigner(_signer)
                        const address = await _signer.getAddress()
                        if (subscribed && address) {
                            console.debug("address", address)
                            setCurrentAddress(address)
                        }
                    }
                }

                setERC20Burnable(getERC20Burnable(_provider, _signer))
                setERC20Mintable(getERC20Mintable(_provider, _signer))
                setERC20MintableBurnable(getERC20MintableBurnable(_provider, _signer))
                setMyContract(getMyContract(_provider, _signer))
                setSimpleStorage(getSimpleStorage(_provider, _signer))
                setERC20(getERC20(_provider, _signer))
                setSimpleStorage2(getSimpleStorage2(_provider, _signer))

                setReady(true)
            }
        };
        doAsync();
        return () => { subscribed = false }
    }, [])

    const getERC20Burnable = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = undefined
        const contract: SymfoniErc20Burnable = {
            instance: instance,
            factory: _signer ? new Erc20BurnableFactory(_signer) : undefined,
        }
        return contract
    };
    const getERC20Mintable = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = undefined
        const contract: SymfoniErc20Mintable = {
            instance: instance,
            factory: _signer ? new Erc20MintableFactory(_signer) : undefined,
        }
        return contract
    };
    const getERC20MintableBurnable = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = undefined
        const contract: SymfoniErc20MintableBurnable = {
            instance: instance,
            factory: _signer ? new Erc20MintableBurnableFactory(_signer) : undefined,
        }
        return contract
    };
    const getMyContract = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = MyContractDeployment.receipt.contractAddress
        const instance = _signer ? MyContractFactory.connect(contractAddress, _signer) : MyContractFactory.connect(contractAddress, _provider)
        const contract: SymfoniMyContract = {
            instance: instance,
            factory: _signer ? new MyContractFactory(_signer) : undefined,
        }
        return contract
    };
    const getSimpleStorage = (_provider: providers.Provider, _signer?: Signer) => {

        const contractAddress = SimpleStorageDeployment.receipt.contractAddress
        const instance = _signer ? SimpleStorageFactory.connect(contractAddress, _signer) : SimpleStorageFactory.connect(contractAddress, _provider)
        const contract: SymfoniSimpleStorage = {
            instance: instance,
            factory: _signer ? new SimpleStorageFactory(_signer) : undefined,
        }
        return contract
    };
    const getERC20 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = undefined
        const contract: SymfoniErc20 = {
            instance: instance,
            factory: _signer ? new Erc20Factory(_signer) : undefined,
        }
        return contract
    };
    const getSimpleStorage2 = (_provider: providers.Provider, _signer?: Signer) => {
        let instance = undefined
        const contract: SymfoniSimpleStorage2 = {
            instance: instance,
            factory: _signer ? new SimpleStorage2Factory(_signer) : undefined,
        }
        return contract
    };
    return (
        <ProviderContext.Provider value={[provider, setProvider]}>
            <SignerContext.Provider value={[signer, setSigner]}>
                <CurrentAddressContext.Provider value={[currentAddress, setCurrentAddress]}>
                    <ERC20BurnableContext.Provider value={ERC20Burnable}>
                        <ERC20MintableContext.Provider value={ERC20Mintable}>
                            <ERC20MintableBurnableContext.Provider value={ERC20MintableBurnable}>
                                <MyContractContext.Provider value={MyContract}>
                                    <SimpleStorageContext.Provider value={SimpleStorage}>
                                        <ERC20Context.Provider value={ERC20}>
                                            <SimpleStorage2Context.Provider value={SimpleStorage2}>
                                                {ready &&
                                                    (props.children)
                                                }
                                                {!ready &&
                                                    <div>
                                                        {messages.map((msg, i) => (
                                                            <p key={i}>{msg}</p>
                                                        ))}
                                                    </div>
                                                }
                                            </SimpleStorage2Context.Provider >
                                        </ERC20Context.Provider >
                                    </SimpleStorageContext.Provider >
                                </MyContractContext.Provider >
                            </ERC20MintableBurnableContext.Provider >
                        </ERC20MintableContext.Provider >
                    </ERC20BurnableContext.Provider >
                </CurrentAddressContext.Provider>
            </SignerContext.Provider>
        </ProviderContext.Provider>
    )
};
