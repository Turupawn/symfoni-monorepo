/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { providers, Signer, ethers } from "ethers";
import React, { useEffect, useState } from "react";
import Web3Modal, { IProviderOptions } from "web3modal";

export const emptyContract = {
    instance: undefined,
    factory: undefined
};
export const defaultProvider: providers.Provider = ethers.providers.getDefaultProvider();
export const ProviderContext = React.createContext<[providers.Provider, React.Dispatch<React.SetStateAction<providers.Provider>>]>([defaultProvider, () => { }]);
export const defaultCurrentAddress: string = "";
export const CurrentAddressContext = React.createContext<[string, React.Dispatch<React.SetStateAction<string>>]>([defaultCurrentAddress, () => { }]);
export const defaultSigner: Signer | undefined = undefined;
export const SignerContext = React.createContext<[Signer | undefined, React.Dispatch<React.SetStateAction<Signer | undefined>>]>([defaultSigner, () => { }]);

export interface HardhatContextProps {
}

export const HardhatContext: React.FC<HardhatContextProps> = (props) => {
    const [ready, setReady] = useState(false);
    const [messages, setMessages] = useState<string[]>([]);
    const [/* providerName */, setProviderName] = useState<string>();
    const [signer, setSigner] = useState<Signer | undefined>(defaultSigner);
    const [provider, setProvider] = useState<providers.Provider>(defaultProvider);
    const [currentAddress, setCurrentAddress] = useState<string>(defaultCurrentAddress);
    const providerPriority = ["web3modal", "hardhat"];
    useEffect(() => {
        console.debug(messages.pop())
    }, [messages])

    const getProvider = async (): Promise<providers.Provider | undefined> => {
        const provider = await providerPriority.reduce(async (maybeProvider: Promise<providers.Provider | undefined>, providerIdentification) => {
            let foundProvider = await maybeProvider
            if (foundProvider) {
                return Promise.resolve(foundProvider)
            }
            else {
                switch (providerIdentification.toLowerCase()) {
                    case "web3modal":
                        try {
                            const provider = await getWeb3ModalProvider()
                            const web3provider = new ethers.providers.Web3Provider(provider);
                            return Promise.resolve(web3provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    case "hardhat":
                        try {
                            const provider = new ethers.providers.JsonRpcProvider({ // TODO make this param
                                url: "http://localhost:8545"
                            });
                            return Promise.resolve(provider)
                        } catch (error) {
                            return Promise.resolve(undefined)
                        }
                    default:
                        return Promise.resolve(undefined)
                }
            }
        }, Promise.resolve(undefined)) // end reduce
        return provider;
    };
    const getSigner = async (_provider: providers.Provider): Promise<Signer | undefined> => {
        switch (_provider.constructor.name) {
            case "Web3Provider":
                const web3provider = _provider as ethers.providers.Web3Provider
                return await web3provider.getSigner()
            case "JsonRpcProvider":
                return ethers.Wallet.fromMnemonic("shrug antique orange tragic direct drop abstract ring carry price anchor train").connect(_provider)

            default:
                return undefined
        }
    };
    const getWeb3ModalProvider = async (): Promise<any> => {
        const providerOptions: IProviderOptions = {};
        const web3Modal = new Web3Modal({
            // network: "mainnet",
            cacheProvider: true,
            providerOptions, // required
        });
        return await web3Modal.connect();
    };
    useEffect(() => {
        let subscribed = true
        const doAsync = async () => {
            setMessages(old => [...old, "Initiating Hardhat React"])
            const _provider = await getProvider() // getProvider can actually return undefined, see issue https://github.com/microsoft/TypeScript/issues/11094
            if (subscribed && _provider) {
                const _providerName = _provider.constructor.name;
                console.debug("_providerName", _providerName)
                setProvider(_provider)
                setProviderName(_providerName)
                setMessages(old => [...old, "Useing provider: " + _providerName])
                const _signer = await getSigner(_provider);
                if (subscribed && _signer) {
                    setSigner(_signer)
                    const address = await _signer.getAddress()
                    if (subscribed && address) {
                        console.debug("address", address)
                        setCurrentAddress(address)
                    }
                }
                setReady(true)
            }
        };
        doAsync();
        return () => { subscribed = false }
    }, [])
    return (
        <ProviderContext.Provider value={[provider, setProvider]}>
            <SignerContext.Provider value={[signer, setSigner]}>
                <CurrentAddressContext.Provider value={[currentAddress, setCurrentAddress]}>
                    {ready &&
                        (props.children)
                    }
                    {!ready &&
                        <div>
                            {messages.map((msg, i) => (
                                <p key={i}>{msg}</p>
                            ))}
                        </div>
                    }
                </CurrentAddressContext.Provider>
            </SignerContext.Provider>
        </ProviderContext.Provider>
    )
};
